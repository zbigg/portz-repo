--- /d/oss/portz2/src/botan/Botan-1.8.8/configure.py	2009-11-03 19:02:16 +0100
+++ configure.py	2009-11-13 12:38:36 +0100
@@ -30,6 +30,10 @@
 from optparse import (OptionParser, OptionGroup,
                       IndentedHelpFormatter, SUPPRESS_HELP)
 
+def os_path_join(*args):
+    #return "/".join(args)
+    return os.path.join(*args).replace('\\','/')
+    
 class BuildConfigurationInformation(object):
 
     """
@@ -50,13 +54,13 @@
     Constructor
     """
     def __init__(self, options, modules):
-        self.build_dir = os.path.join(options.with_build_dir, 'build')
+        self.build_dir = os_path_join(options.with_build_dir, 'build')
 
-        self.checkobj_dir = os.path.join(self.build_dir, 'checks')
-        self.libobj_dir = os.path.join(self.build_dir, 'lib')
+        self.checkobj_dir = os_path_join(self.build_dir, 'checks')
+        self.libobj_dir = os_path_join(self.build_dir, 'lib')
 
-        self.include_dir = os.path.join(self.build_dir, 'include')
-        self.full_include_dir = os.path.join(self.include_dir, 'botan')
+        self.include_dir = os_path_join(self.build_dir, 'include')
+        self.full_include_dir = os_path_join(self.include_dir, 'botan')
 
         all_files = sum([mod.add for mod in modules], [])
 
@@ -65,10 +69,10 @@
 
         self.sources = sorted(set(all_files) - set(self.headers))
 
-        checks_dir = os.path.join(options.base_dir, 'checks')
+        checks_dir = os_path_join(options.base_dir, 'checks')
 
         self.check_sources = sorted(
-            [os.path.join(checks_dir, file) for file in os.listdir(checks_dir)
+            [os_path_join(checks_dir, file) for file in os.listdir(checks_dir)
              if file.endswith('.cpp')])
 
     def doc_files(self):
@@ -78,7 +82,7 @@
                         'api.tex', 'tutorial.tex', 'fips140.tex',
                         'credits.txt', 'license.txt', 'log.txt',
                         'thanks.txt', 'todo.txt', 'pgpkeys.asc']:
-            filename = os.path.join('doc', docfile)
+            filename = os_path_join('doc', docfile)
             if os.access(filename, os.R_OK):
                 docs.append(filename)
         return docs
@@ -265,7 +269,7 @@
     to_obj.lives_in = dirname
     if basename == 'info.txt':
         (obj_dir,to_obj.basename) = os.path.split(dirname)
-        if os.access(os.path.join(obj_dir, 'info.txt'), os.R_OK):
+        if os.access(os_path_join(obj_dir, 'info.txt'), os.R_OK):
             to_obj.parent_module = os.path.basename(obj_dir)
         else:
             to_obj.parent_module = None
@@ -339,13 +343,13 @@
 
         def add_dir_name(filename):
             if filename.count(':') == 0:
-                return os.path.join(self.lives_in, filename)
+                return os_path_join(self.lives_in, filename)
 
             # modules can request to add files of the form
             # MODULE_NAME:FILE_NAME to add a file from another module
             # For these, assume other module is always in a
             # neighboring directory; this is true for all current uses
-            return os.path.join(os.path.split(self.lives_in)[0],
+            return os_path_join(os.path.split(self.lives_in)[0],
                                 *filename.split(':'))
 
         self.add = map(add_dir_name, self.add)
@@ -631,7 +635,7 @@
                 basename = basename.replace(src_suffix,
                                             '.' + osinfo.obj_suffix)
 
-            yield os.path.join(obj_dir, basename)
+            yield os_path_join(obj_dir, basename)
 
 
     def choose_mp_bits():
@@ -667,7 +671,7 @@
 
     def prefix_with_build_dir(path):
         if options.with_build_dir != None:
-            return os.path.join(options.with_build_dir, path)
+            return os_path_join(options.with_build_dir, path)
         return path
 
     return {
@@ -757,9 +761,9 @@
         'so_suffix': osinfo.so_suffix,
 
         'botan_config': prefix_with_build_dir(
-            os.path.join(build_config.build_dir, 'botan-config')),
+            os_path_join(build_config.build_dir, 'botan-config')),
         'botan_pkgconfig': prefix_with_build_dir(
-            os.path.join(build_config.build_dir,
+            os_path_join(build_config.build_dir,
                          build_config.pkg_config_file())),
 
         'doc_files': makefile_list(build_config.doc_files()),
@@ -873,7 +877,7 @@
     def find_files_named(desired_name, in_path):
         for (dirpath, dirnames, filenames) in os.walk(in_path):
             if desired_name in filenames:
-                yield os.path.join(dirpath, desired_name)
+                yield os_path_join(dirpath, desired_name)
 
     modules = dict([(mod.basename, mod) for mod in
                     [ModuleInfo(info) for info in
@@ -881,10 +885,10 @@
 
     def list_files_in_build_data(subdir):
         for (dirpath, dirnames, filenames) in \
-                os.walk(os.path.join(options.build_data, subdir)):
+                os.walk(os_path_join(options.build_data, subdir)):
             for filename in filenames:
                 if filename.endswith('.txt'):
-                    yield os.path.join(dirpath, filename)
+                    yield os_path_join(dirpath, filename)
 
     def form_name(filepath):
         return os.path.basename(filepath).replace('.txt', '')
@@ -926,16 +930,16 @@
 
             dirs_up = count_dirs(target_dir)
 
-            source = os.path.join(os.path.join(*[os.path.pardir]*dirs_up),
+            source = os_path_join(os_path_join(*[os.path.pardir]*dirs_up),
                                   filename)
 
-            target = os.path.join(target_dir, os.path.basename(filename))
+            target = os_path_join(target_dir, os.path.basename(filename))
 
             os.symlink(source, target)
 
         elif 'link' in os.__dict__:
             os.link(filename,
-                    os.path.join(target_dir, os.path.basename(filename)))
+                    os_path_join(target_dir, os.path.basename(filename)))
 
         else:
             shutil.copy(filename, target_dir)
@@ -962,7 +966,7 @@
                  build_config.full_include_dir]:
         os.makedirs(dirs)
 
-    makefile_template = os.path.join(
+    makefile_template = os_path_join(
         options.makefile_dir,
         choose_makefile_template(template_vars['makefile_style']))
 
@@ -976,8 +980,8 @@
                              ('botan-config.in', 'botan-config'),
                              ('botan.pc.in', build_config.pkg_config_file()),
                              ('botan.doxy.in', 'botan.doxy')]:
-        templates_to_proc[os.path.join(options.build_data, template)] = \
-             os.path.join(build_config.build_dir, sink)
+        templates_to_proc[os_path_join(options.build_data, template)] = \
+             os_path_join(build_config.build_dir, sink)
 
     for (template, sink) in templates_to_proc.items():
         try:
@@ -1015,10 +1019,10 @@
         raise Exception("Jython detected: need --os and --cpu to set target")
 
     options.base_dir = os.path.dirname(argv[0])
-    options.src_dir = os.path.join(options.base_dir, 'src')
+    options.src_dir = os_path_join(options.base_dir, 'src')
 
-    options.build_data = os.path.join(options.src_dir, 'build-data')
-    options.makefile_dir = os.path.join(options.build_data, 'makefile')
+    options.build_data = os_path_join(options.src_dir, 'build-data')
+    options.makefile_dir = os_path_join(options.build_data, 'makefile')
 
     (modules, archinfo, ccinfo, osinfo) = load_info_files(options)
 
@@ -1097,7 +1101,7 @@
 
     build_config = BuildConfigurationInformation(options, modules_to_use)
     build_config.headers.append(
-        os.path.join(build_config.build_dir, 'build.h'))
+        os_path_join(build_config.build_dir, 'build.h'))
 
     template_vars = create_template_vars(build_config, options,
                                          modules_to_use,
@@ -1115,6 +1119,7 @@
     try:
         main()
     except Exception, e:
+        #raise
         print >>sys.stderr, e
         #import traceback
         #traceback.print_exc(file=sys.stderr)
